/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GameManager {
  export type PlayerDataStruct = {
    totalExperience: BigNumberish;
    level: BigNumberish;
    lastBattleTime: BigNumberish;
    battlesWon: BigNumberish;
    battlesLost: BigNumberish;
    isActive: boolean;
  };

  export type PlayerDataStructOutput = [
    totalExperience: bigint,
    level: bigint,
    lastBattleTime: bigint,
    battlesWon: bigint,
    battlesLost: bigint,
    isActive: boolean
  ] & {
    totalExperience: bigint;
    level: bigint;
    lastBattleTime: bigint;
    battlesWon: bigint;
    battlesLost: bigint;
    isActive: boolean;
  };

  export type BattleResultStruct = {
    player: AddressLike;
    victory: boolean;
    experienceGained: BigNumberish;
    tokensEarned: BigNumberish;
    timestamp: BigNumberish;
  };

  export type BattleResultStructOutput = [
    player: string,
    victory: boolean,
    experienceGained: bigint,
    tokensEarned: bigint,
    timestamp: bigint
  ] & {
    player: string;
    victory: boolean;
    experienceGained: bigint;
    tokensEarned: bigint;
    timestamp: bigint;
  };
}

export interface GameManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AIRDROP_ROLE"
      | "BASE_BATTLE_REWARD"
      | "BATTLE_COOLDOWN"
      | "DEFAULT_ADMIN_ROLE"
      | "EXP_PER_LEVEL"
      | "GAME_MASTER_ROLE"
      | "LEVEL_UP_ROLE"
      | "aetheriumAvatar"
      | "aetheriumShard"
      | "airdropWinners"
      | "avatarData"
      | "awardExperience"
      | "battleHistory"
      | "canBattle"
      | "completeBattle"
      | "getAvatarData"
      | "getBattleHistoryLength"
      | "getBattleResult"
      | "getExpToNextLevel"
      | "getPlayerData"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "playerData"
      | "registerPlayer"
      | "registeredPlayers"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AirdropExecuted"
      | "AvatarLevelUp"
      | "BattleCompleted"
      | "ExperienceAwarded"
      | "PlayerLevelUp"
      | "PlayerRegistered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AIRDROP_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_BATTLE_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BATTLE_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXP_PER_LEVEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAME_MASTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEVEL_UP_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetheriumAvatar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetheriumShard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropWinners",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "avatarData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "awardExperience",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "battleHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canBattle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeBattle",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvatarData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleHistoryLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpToNextLevel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredPlayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "AIRDROP_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_BATTLE_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BATTLE_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXP_PER_LEVEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAME_MASTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEVEL_UP_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetheriumAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetheriumShard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "avatarData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "awardExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "battleHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvatarData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattleHistoryLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattleResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpToNextLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace AirdropExecutedEvent {
  export type InputTuple = [
    recipients: AddressLike[],
    amounts: BigNumberish[],
    totalAmount: BigNumberish
  ];
  export type OutputTuple = [
    recipients: string[],
    amounts: bigint[],
    totalAmount: bigint
  ];
  export interface OutputObject {
    recipients: string[];
    amounts: bigint[];
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvatarLevelUpEvent {
  export type InputTuple = [avatarId: BigNumberish, newLevel: BigNumberish];
  export type OutputTuple = [avatarId: bigint, newLevel: bigint];
  export interface OutputObject {
    avatarId: bigint;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BattleCompletedEvent {
  export type InputTuple = [
    player: AddressLike,
    victory: boolean,
    expGained: BigNumberish,
    tokensEarned: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    victory: boolean,
    expGained: bigint,
    tokensEarned: bigint
  ];
  export interface OutputObject {
    player: string;
    victory: boolean;
    expGained: bigint;
    tokensEarned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExperienceAwardedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerLevelUpEvent {
  export type InputTuple = [player: AddressLike, newLevel: BigNumberish];
  export type OutputTuple = [player: string, newLevel: bigint];
  export interface OutputObject {
    player: string;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [player: AddressLike, avatarId: BigNumberish];
  export type OutputTuple = [player: string, avatarId: bigint];
  export interface OutputObject {
    player: string;
    avatarId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameManager extends BaseContract {
  connect(runner?: ContractRunner | null): GameManager;
  waitForDeployment(): Promise<this>;

  interface: GameManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AIRDROP_ROLE: TypedContractMethod<[], [string], "view">;

  BASE_BATTLE_REWARD: TypedContractMethod<[], [bigint], "view">;

  BATTLE_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EXP_PER_LEVEL: TypedContractMethod<[], [bigint], "view">;

  GAME_MASTER_ROLE: TypedContractMethod<[], [string], "view">;

  LEVEL_UP_ROLE: TypedContractMethod<[], [string], "view">;

  aetheriumAvatar: TypedContractMethod<[], [string], "view">;

  aetheriumShard: TypedContractMethod<[], [string], "view">;

  airdropWinners: TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  avatarData: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalExperience: bigint;
        level: bigint;
        lastBattleTime: bigint;
        battlesWon: bigint;
        battlesLost: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  awardExperience: TypedContractMethod<
    [player: AddressLike, experience: BigNumberish],
    [void],
    "nonpayable"
  >;

  battleHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, bigint, bigint, bigint] & {
        player: string;
        victory: boolean;
        experienceGained: bigint;
        tokensEarned: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  canBattle: TypedContractMethod<[player: AddressLike], [boolean], "view">;

  completeBattle: TypedContractMethod<
    [player: AddressLike, victory: boolean],
    [void],
    "nonpayable"
  >;

  getAvatarData: TypedContractMethod<
    [avatarId: BigNumberish],
    [GameManager.PlayerDataStructOutput],
    "view"
  >;

  getBattleHistoryLength: TypedContractMethod<[], [bigint], "view">;

  getBattleResult: TypedContractMethod<
    [index: BigNumberish],
    [GameManager.BattleResultStructOutput],
    "view"
  >;

  getExpToNextLevel: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerData: TypedContractMethod<
    [player: AddressLike],
    [GameManager.PlayerDataStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  playerData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalExperience: bigint;
        level: bigint;
        lastBattleTime: bigint;
        battlesWon: bigint;
        battlesLost: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  registerPlayer: TypedContractMethod<
    [avatarId: BigNumberish],
    [void],
    "nonpayable"
  >;

  registeredPlayers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AIRDROP_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASE_BATTLE_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BATTLE_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EXP_PER_LEVEL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GAME_MASTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LEVEL_UP_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "aetheriumAvatar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "aetheriumShard"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "airdropWinners"
  ): TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "avatarData"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalExperience: bigint;
        level: bigint;
        lastBattleTime: bigint;
        battlesWon: bigint;
        battlesLost: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "awardExperience"
  ): TypedContractMethod<
    [player: AddressLike, experience: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "battleHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, bigint, bigint, bigint] & {
        player: string;
        victory: boolean;
        experienceGained: bigint;
        tokensEarned: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "canBattle"
  ): TypedContractMethod<[player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "completeBattle"
  ): TypedContractMethod<
    [player: AddressLike, victory: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvatarData"
  ): TypedContractMethod<
    [avatarId: BigNumberish],
    [GameManager.PlayerDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBattleHistoryLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBattleResult"
  ): TypedContractMethod<
    [index: BigNumberish],
    [GameManager.BattleResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExpToNextLevel"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerData"
  ): TypedContractMethod<
    [player: AddressLike],
    [GameManager.PlayerDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "playerData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalExperience: bigint;
        level: bigint;
        lastBattleTime: bigint;
        battlesWon: bigint;
        battlesLost: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerPlayer"
  ): TypedContractMethod<[avatarId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredPlayers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "AirdropExecuted"
  ): TypedContractEvent<
    AirdropExecutedEvent.InputTuple,
    AirdropExecutedEvent.OutputTuple,
    AirdropExecutedEvent.OutputObject
  >;
  getEvent(
    key: "AvatarLevelUp"
  ): TypedContractEvent<
    AvatarLevelUpEvent.InputTuple,
    AvatarLevelUpEvent.OutputTuple,
    AvatarLevelUpEvent.OutputObject
  >;
  getEvent(
    key: "BattleCompleted"
  ): TypedContractEvent<
    BattleCompletedEvent.InputTuple,
    BattleCompletedEvent.OutputTuple,
    BattleCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ExperienceAwarded"
  ): TypedContractEvent<
    ExperienceAwardedEvent.InputTuple,
    ExperienceAwardedEvent.OutputTuple,
    ExperienceAwardedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerLevelUp"
  ): TypedContractEvent<
    PlayerLevelUpEvent.InputTuple,
    PlayerLevelUpEvent.OutputTuple,
    PlayerLevelUpEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AirdropExecuted(address[],uint256[],uint256)": TypedContractEvent<
      AirdropExecutedEvent.InputTuple,
      AirdropExecutedEvent.OutputTuple,
      AirdropExecutedEvent.OutputObject
    >;
    AirdropExecuted: TypedContractEvent<
      AirdropExecutedEvent.InputTuple,
      AirdropExecutedEvent.OutputTuple,
      AirdropExecutedEvent.OutputObject
    >;

    "AvatarLevelUp(uint256,uint8)": TypedContractEvent<
      AvatarLevelUpEvent.InputTuple,
      AvatarLevelUpEvent.OutputTuple,
      AvatarLevelUpEvent.OutputObject
    >;
    AvatarLevelUp: TypedContractEvent<
      AvatarLevelUpEvent.InputTuple,
      AvatarLevelUpEvent.OutputTuple,
      AvatarLevelUpEvent.OutputObject
    >;

    "BattleCompleted(address,bool,uint256,uint256)": TypedContractEvent<
      BattleCompletedEvent.InputTuple,
      BattleCompletedEvent.OutputTuple,
      BattleCompletedEvent.OutputObject
    >;
    BattleCompleted: TypedContractEvent<
      BattleCompletedEvent.InputTuple,
      BattleCompletedEvent.OutputTuple,
      BattleCompletedEvent.OutputObject
    >;

    "ExperienceAwarded(address,uint256)": TypedContractEvent<
      ExperienceAwardedEvent.InputTuple,
      ExperienceAwardedEvent.OutputTuple,
      ExperienceAwardedEvent.OutputObject
    >;
    ExperienceAwarded: TypedContractEvent<
      ExperienceAwardedEvent.InputTuple,
      ExperienceAwardedEvent.OutputTuple,
      ExperienceAwardedEvent.OutputObject
    >;

    "PlayerLevelUp(address,uint8)": TypedContractEvent<
      PlayerLevelUpEvent.InputTuple,
      PlayerLevelUpEvent.OutputTuple,
      PlayerLevelUpEvent.OutputObject
    >;
    PlayerLevelUp: TypedContractEvent<
      PlayerLevelUpEvent.InputTuple,
      PlayerLevelUpEvent.OutputTuple,
      PlayerLevelUpEvent.OutputObject
    >;

    "PlayerRegistered(address,uint256)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
